---
import BaseLayout from '../layouts/BaseLayout.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
import '../styles/animations.css';

import { getCollection } from 'astro:content';

const posts = (await getCollection('blog')).sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);

const latestPost = posts[0];

const navItems = [
  { name: '2025 H4CKZ', image: '/treeloop.jpg', secondaryImage: '/slaughterline.jpg', link: '/blog/sams-scams' },
  { name: 'About Us', image: '/treedetails.jpg', link: '/about' },
  { name: 'Projects', image: '/treeshine.jpg', link: '/projects' },
  { name: 'DeFi Simplified', image: '/treeloop.jpg', link: '/research' }
];
---

<BaseLayout 
  title={SITE_TITLE} 
  description={SITE_DESCRIPTION}
  data-latest-post-slug={latestPost?.slug}
  data-latest-post-title={latestPost?.data.title}
  data-latest-post-description={latestPost?.data.description}
>
  <div class="fixed inset-0 bg-black z-0">
    <div class="lightning-container">
      <div class="lightning-bolt"></div>
    </div>
  </div>
  
  <!-- Blog Post Popup -->
  <div id="blogPopup" class="fixed inset-0 z-50 hidden">
    <div class="absolute inset-0 bg-black/70"></div>
    <div class="relative max-w-lg mx-auto mt-20 bg-slate-800 rounded-lg shadow-xl p-6">
      <h2 id="popupTitle" class="text-2xl font-bold text-emerald-100 mb-4"></h2>
      <p id="popupDescription" class="text-slate-300 mb-6"></p>
      <div class="flex justify-end gap-4">
        <button id="readMoreBtn" class="px-4 py-2 bg-emerald-600 text-white rounded hover:bg-emerald-700">
          Read More
        </button>
        <button id="closePopupBtn" class="px-4 py-2 bg-slate-600 text-white rounded hover:bg-slate-700">
          Close
        </button>
      </div>
    </div>
  </div>
  
  <main class="relative min-h-screen overflow-hidden">
    <div class="tree-container fixed inset-0 flex items-center justify-center">
      <!-- Background gradient -->
      <div class="absolute inset-0 bg-gradient-to-br from-black via-gray-900 to-black"></div>
      
      <!-- Magical Tree Entrance -->
      <div class="tree-entrance-container">
        <div class="absolute inset-0 bg-black transition-opacity duration-1000"></div>
        <img 
          src="/hometree.jpg" 
          alt="Magical Tree 1" 
          class="tree-entrance tree-1 absolute w-screen h-screen object-cover opacity-0"
        />
        <img 
          src="/treedetails.jpg" 
          alt="Magical Tree 2" 
          class="tree-entrance tree-2 absolute w-screen h-screen object-cover opacity-0"
        />
        <img 
          src="/treeshine.jpg" 
          alt="Magical Tree 3" 
          class="tree-entrance tree-3 absolute w-screen h-screen object-cover opacity-0"
        />
      </div>

      <!-- Latest Transmissions -->
      <a href={`/blog/${latestPost.slug}`} class="absolute bottom-8 right-8 w-96 bg-black/30 backdrop-blur-sm rounded-lg blog-post-container group hover:bg-black/40 transition-all duration-300">
        <div class="p-6">
          <h2 class="text-lg font-bold text-emerald-100/90 mb-3 border-b border-emerald-500/30 pb-2 sharp-heading group-hover:text-emerald-100 group-hover:border-emerald-500/50">Latest Transmissions</h2>
          <div class="text-slate-300/90 group-hover:text-slate-300">
            <img src={latestPost.data.heroImage} alt={latestPost.data.title} class="w-full h-40 object-cover rounded mb-3"/>
            <h3 class="text-md text-emerald-200/90 mb-2 group-hover:text-emerald-200">{latestPost.data.title}</h3>
          </div>
        </div>
      </a>
      
      <!-- Circular Navigation -->
      <div class="nav-circle">
        {navItems.map((item, index) => (
          <a 
            href={`/${item.name.toLowerCase()}`} 
            class="nav-item group"
            data-image={item.image}
          >
            <div class="nav-section text-white text-xl font-bold">
              {item.name}
            </div>
          </a>
        ))}
      </div>

      <!-- Tree images that appear on hover -->
      {navItems.map((item) => (
        <img 
          src={item.image}
          alt={`${item.name} Tree`}
          class="tree-image w-[400px] h-[400px] object-cover rounded-full"
          data-section={item.name.toLowerCase()}
        />
      ))}
    </div>
  </main>
</BaseLayout>

<script>
// Get latest post data from server
const latestPostData = {
  slug: document.querySelector('body')?.getAttribute('data-latest-post-slug') || '',
  title: document.querySelector('body')?.getAttribute('data-latest-post-title') || '',
  description: document.querySelector('body')?.getAttribute('data-latest-post-description') || ''
};

const navItems = document.querySelectorAll('.nav-item');
const treeImages = document.querySelectorAll<HTMLImageElement>('.tree-image');
const entranceContainer = document.querySelector('.tree-entrance-container') as HTMLElement;

// Get popup elements
const popup = document.getElementById('blogPopup') as HTMLElement;
const popupTitle = document.getElementById('popupTitle') as HTMLElement;
const popupDescription = document.getElementById('popupDescription') as HTMLElement;
const readMoreBtn = document.getElementById('readMoreBtn') as HTMLElement;
const closePopupBtn = document.getElementById('closePopupBtn') as HTMLElement;

let currentPostSlug = '';

const navData = [
  { name: '2025 h4ckz', image: '/treeloop.jpg', secondaryImage: '/slaughterline.jpg', link: '/blog/sams-scams' },
  { name: 'about us', image: '/treedetails.jpg', link: '/about' },
  { name: 'projects', image: '/treeshine.jpg', link: '/projects' },
  { name: 'defi simplified', image: '/treeloop.jpg', link: '/research' }
];

// Handle magical entrance animation
const blackOverlay = document.querySelector('.tree-entrance-container > div') as HTMLElement;
const entranceTrees = document.querySelectorAll<HTMLImageElement>('.tree-entrance');

// Start the entrance sequence
window.addEventListener('load', () => {
  // Fade out black background
  setTimeout(() => {
    if (blackOverlay) {
      blackOverlay.style.opacity = '0';
    }
    
    // Trigger tree animations
    entranceTrees.forEach((tree, index) => {
      setTimeout(() => {
        tree.style.opacity = '1';
        tree.style.animation = `magicalEntrance${index + 1} 3s cubic-bezier(0.4, 0, 0.2, 1) forwards`;
      }, index * 500); // Stagger the animations
    });
  }, 500); // Wait a bit before starting the sequence
});

// After animations complete
entranceContainer?.addEventListener('animationend', (e) => {
  if (e.target === entranceTrees[entranceTrees.length - 1]) {
    entranceContainer.style.opacity = '1';
    entranceContainer.style.transition = 'opacity 0.5s ease';
  }
});

navItems.forEach(item => {
  item.addEventListener('mouseenter', () => {
    entranceContainer.style.setProperty('opacity', '0.8');
    const section = item.textContent?.toLowerCase().trim();
    const navItem = navData.find(nav => nav.name === section);
    
    treeImages.forEach(img => {
      if (img.getAttribute('data-section') === section) {
        img.classList.add('active');
        
        // Special handling for different sections
        if (section === '2025 h4ckz') {
          // Add slaughterline image
          const slaughterlineImg = document.createElement('img');
          slaughterlineImg.src = '/slaughterline.jpg';
          slaughterlineImg.classList.add('slaughterline-image');
          slaughterlineImg.style.cssText = `
            position: absolute;
            left: 25%;
            top: 50%;
            transform: translate(-50%, -50%) scale(0);
            width: 300px;
            height: 300px;
            object-fit: cover;
            border-radius: 50%;
            opacity: 0;
            transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
          `;
          document.querySelector('.tree-container')?.appendChild(slaughterlineImg);
          requestAnimationFrame(() => {
            slaughterlineImg.style.transform = 'translate(-50%, -50%) scale(1)';
            slaughterlineImg.style.opacity = '1';
          });
        } else if (section === 'projects') {
          // Show project panel
          const projectPanel = document.createElement('div');
          projectPanel.classList.add('project-panel');
          projectPanel.style.cssText = `
            position: absolute;
            right: 8rem;
            top: 50%;
            transform: translate(100%, -50%);
            width: 300px;
            background: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(10px);
            border-radius: 1rem;
            padding: 1.5rem;
            opacity: 0;
            transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
            border: 1px solid rgba(52, 211, 153, 0.3);
            box-shadow: 0 0 20px rgba(52, 211, 153, 0.2);
          `;
          
          const projectLinks = [
            { name: 'VTSC Coin', link: '/projects#vtsc' },
            { name: 'Vault Network', link: '/projects#vault' },
            { name: 'DeFi Tools', link: '/projects#defi' },
            { name: 'Research Papers', link: '/projects#research' }
          ];
          
          projectLinks.forEach(project => {
            const link = document.createElement('a');
            link.href = project.link;
            link.textContent = project.name;
            link.style.cssText = `
              display: block;
              color: #fff;
              padding: 0.75rem;
              margin-bottom: 0.5rem;
              border-radius: 0.5rem;
              background: rgba(52, 211, 153, 0.1);
              transition: all 0.3s ease;
              text-decoration: none;
            `;
            link.onmouseover = () => {
              link.style.background = 'rgba(52, 211, 153, 0.2)';
              link.style.transform = 'translateX(10px)';
            };
            link.onmouseout = () => {
              link.style.background = 'rgba(52, 211, 153, 0.1)';
              link.style.transform = 'translateX(0)';
            };
            projectPanel.appendChild(link);
          });
          
          document.querySelector('.tree-container')?.appendChild(projectPanel);
          requestAnimationFrame(() => {
            projectPanel.style.transform = 'translate(0, -50%)';
            projectPanel.style.opacity = '1';
          });
        }
      } else {
        img.classList.remove('active');
      }
    });
  });

  item.addEventListener('mouseleave', () => {
    entranceContainer.style.setProperty('opacity', '1');
    treeImages.forEach(img => img.classList.remove('active'));
    // Remove any dynamic elements
    const slaughterline = document.querySelector('.slaughterline-image') as HTMLElement;
    const projectPanel = document.querySelector('.project-panel') as HTMLElement;
    
    if (slaughterline) {
      slaughterline.style.transform = 'translate(-50%, -50%) scale(0)';
      slaughterline.style.opacity = '0';
      setTimeout(() => slaughterline.remove(), 500);
    }
    
    if (projectPanel) {
      projectPanel.style.transform = 'translate(100%, -50%)';
      projectPanel.style.opacity = '0';
      setTimeout(() => projectPanel.remove(), 500);
    }
  });

  item.addEventListener('click', (e) => {
    e.preventDefault();
    const section = item.textContent?.toLowerCase().trim();
    const navItem = navData.find(nav => nav.name === section);
    if (navItem?.link) {
      window.location.href = navItem.link;
    }
  });
});

// Popup event listeners
closePopupBtn?.addEventListener('click', () => {
  popup?.classList.add('hidden');
});

readMoreBtn?.addEventListener('click', () => {
  if (currentPostSlug) {
    window.location.href = `/blog/${currentPostSlug}`;
  }
});

// Close popup when clicking outside
popup?.addEventListener('click', (e) => {
  if (e.target === popup) {
    popup.classList.add('hidden');
  }
});
</script>
