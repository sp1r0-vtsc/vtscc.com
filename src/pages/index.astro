---
import BaseLayout from '../layouts/BaseLayout.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
import '../styles/animations.css';

import { getCollection } from 'astro:content';

const posts = (await getCollection('blog')).sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);

const latestPost = posts[0];

const navItems = [
  { name: '2025 H4CKZ', image: '/treeloop.jpg', secondaryImage: '/slaughterline.jpg', link: '/blog/sams-scams' },
  { name: 'About Us', image: '/treedetails.jpg', link: '/about' },
  { name: 'Projects', image: '/hometree.jpg', link: '/projects' },
  { name: 'DeFi Simplified', image: '/treedetails.jpg', link: '/research' }
];
---

<BaseLayout 
  title={SITE_TITLE} 
  description={SITE_DESCRIPTION}
  data-latest-post-slug={latestPost?.slug}
  data-latest-post-title={latestPost?.data.title}
  data-latest-post-description={latestPost?.data.description}
>
  <div class="fixed inset-0 bg-black z-0">
    <div class="lightning-container">
      <div class="lightning-bolt"></div>
    </div>
  </div>
  
  <!-- Blog Post Popup -->
  <div id="blogPopup" class="fixed inset-0 z-50 hidden">
    <div class="absolute inset-0 bg-black/70"></div>
    <div class="relative max-w-lg mx-auto mt-20 bg-slate-800 rounded-lg shadow-xl p-6">
      <h2 id="popupTitle" class="text-2xl font-bold text-emerald-100 mb-4"></h2>
      <p id="popupDescription" class="text-slate-300 mb-6"></p>
      <div class="flex justify-end gap-4">
        <button id="readMoreBtn" class="px-4 py-2 bg-emerald-600 text-white rounded hover:bg-emerald-700">
          Read More
        </button>
        <button id="closePopupBtn" class="px-4 py-2 bg-slate-600 text-white rounded hover:bg-slate-700">
          Close
        </button>
      </div>
    </div>
  </div>
  
  <main class="relative min-h-screen overflow-hidden">
    <div class="tree-container fixed inset-0 flex items-center justify-center">
      <!-- Background gradient -->
      <div class="absolute inset-0 bg-gradient-to-br from-black via-gray-900 to-black"></div>
      
      <!-- Magical Tree Entrance -->
      <div class="tree-entrance-container">
        <div class="absolute inset-0 bg-black transition-opacity duration-1000"></div>
        <img 
          src="/hometree.jpg" 
          alt="Magical Tree 1" 
          class="tree-entrance tree-1 absolute w-screen h-screen object-cover opacity-0"
        />
        <img 
          src="/treedetails.jpg" 
          alt="Magical Tree 2" 
          class="tree-entrance tree-2 absolute w-screen h-screen object-cover opacity-0"
        />
        <img 
          src="/treeshine.jpg" 
          alt="Magical Tree 3" 
          class="tree-entrance tree-3 absolute w-screen h-screen object-cover opacity-0"
        />
      </div>

      <!-- Latest Transmissions -->
      <a href={`/blog/${latestPost.slug}`} class="absolute top-12 left-8 rounded-lg blog-post-container group transition-all duration-300">
        <div class="p-6">
          <h2 class="text-lg font-bold text-emerald-100/90 mb-3 border-b border-emerald-500/30 pb-2 sharp-heading group-hover:text-emerald-100 group-hover:border-emerald-500/50">Latest Transmissions</h2>
          <div class="text-slate-300/90 group-hover:text-slate-300">
            <img src={latestPost.data.heroImage} alt={latestPost.data.title} class="w-full h-40 object-cover rounded mb-3"/>
            <h3 class="text-md text-emerald-200/90 mb-2 group-hover:text-emerald-200">{latestPost.data.title}</h3>
          </div>
        </div>
      </a>
      
      <!-- Circular Navigation -->
      <div class="nav-circle">
        {navItems.map((item, index) => (
          <a 
            href={`/${item.name.toLowerCase()}`} 
            class="nav-item group"
            data-image={item.image}
          >
            <div class="nav-section text-white text-xl font-bold">
              {item.name}
            </div>
          </a>
        ))}
      </div>

      <!-- Fullscreen overlay -->
      <div class="fullscreen-overlay"></div>

      <!-- DeFi Flash Effect -->
      <img 
        src="/treeshine.jpg"
        alt="DeFi Flash"
        class="defi-flash"
        id="defiFlash"
      />

      <!-- Tree images that appear on hover -->
      {navItems.map((item) => (
        <img 
          src={item.image}
          alt={`${item.name} Tree`}
          class="tree-image"
          data-section={item.name.toLowerCase()}
        />
      ))}

      <!-- DeFi Content -->
      <div id="defiContent" class="fixed inset-0 z-20 hidden">
        <div class="absolute inset-0 bg-black/70 backdrop-blur-sm"></div>
        <div class="relative z-30 max-w-4xl mx-auto mt-24 p-8 bg-slate-800/90 rounded-lg border border-amber-900/30 shadow-lg">
          <h2 class="text-3xl font-bold mb-6 text-amber-200">Pioneering Simplicity in Web3</h2>
          
          <div class="space-y-6">
            <div class="bg-slate-700/50 p-6 rounded-lg">
              <h3 class="text-xl font-semibold mb-3 text-amber-100">Secure Computing Architecture</h3>
              <p class="text-slate-300">
                From cold storage solutions to multi-signature systems, we design and implement computing environments that prioritize security without sacrificing usability. Our experience with early cryptocurrency exchanges and payment processors has shaped our approach to building systems that stand the test of time.
              </p>
            </div>

            <div class="bg-slate-700/50 p-6 rounded-lg">
              <h3 class="text-xl font-semibold mb-3 text-amber-100">Blockchain & Digital Asset Security</h3>
              <p class="text-slate-300">
                We specialize in cryptocurrency wallet architecture, smart contract auditing, and secure key management protocols. Our team has been researching and implementing blockchain solutions since the early days of digital currency, giving us unique insight into both the technical and practical aspects of crypto security.
              </p>
            </div>

            <div class="bg-slate-700/50 p-6 rounded-lg">
              <h3 class="text-xl font-semibold mb-3 text-amber-100">Payment Systems Integration</h3>
              <p class="text-slate-300">
                We bridge the gap between traditional finance and DeFi, creating seamless payment interfaces that handle both fiat and cryptocurrency transactions. Our solutions abstract away complexity while maintaining institutional-grade security standards.
              </p>
            </div>
          </div>

          <button 
            id="closeDefiBtn"
            class="absolute top-4 right-4 text-amber-200 hover:text-amber-100 p-2"
          >
            <span class="sr-only">Close</span>
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
      </div>
    </div>
  </main>
</BaseLayout>

<script>
// Get latest post data from server
const latestPostData = {
  slug: document.querySelector('body')?.getAttribute('data-latest-post-slug') || '',
  title: document.querySelector('body')?.getAttribute('data-latest-post-title') || '',
  description: document.querySelector('body')?.getAttribute('data-latest-post-description') || ''
};

const navItems = document.querySelectorAll('.nav-item');
const treeImages = document.querySelectorAll<HTMLImageElement>('.tree-image');
const entranceContainer = document.querySelector('.tree-entrance-container') as HTMLElement;

// Get popup elements
const popup = document.getElementById('blogPopup') as HTMLElement;
const popupTitle = document.getElementById('popupTitle') as HTMLElement;
const popupDescription = document.getElementById('popupDescription') as HTMLElement;
const readMoreBtn = document.getElementById('readMoreBtn') as HTMLElement;
const closePopupBtn = document.getElementById('closePopupBtn') as HTMLElement;

let currentPostSlug = '';

const navData = [
  { name: '2025 h4ckz', image: '/treeloop.jpg', secondaryImage: '/slaughterline.jpg', link: '/blog/sams-scams' },
  { name: 'about us', image: '/treedetails.jpg', link: '/about' },
  { name: 'projects', image: '/hometree.jpg', link: '/projects' },
  { name: 'defi simplified', image: '/treedetails.jpg', link: '/research' }
];

// Handle magical entrance animation
const blackOverlay = document.querySelector('.tree-entrance-container > div') as HTMLElement;
const entranceTrees: NodeListOf<HTMLImageElement> = document.querySelectorAll('.tree-entrance');

// Start the entrance sequence
window.addEventListener('load', () => {
  // Add a class to start the sequence
  document.body.classList.add('animation-start');
  
  // Fade out black background
  setTimeout(() => {
    if (blackOverlay) {
      blackOverlay.style.opacity = '0';
    }
    
    // Trigger tree animations
    entranceTrees.forEach((tree, index) => {
      setTimeout(() => {
        tree.style.opacity = '1';
        tree.style.animation = `magicalEntrance${index + 1} 3s cubic-bezier(0.4, 0, 0.2, 1) forwards`;
      }, index * 500);
    });

    // Set final state after all animations complete
    setTimeout(() => {
      if (entranceContainer) {
        entranceContainer.style.opacity = '1';
        entranceContainer.style.transition = 'opacity 0.5s ease';
      }
    }, 4500); // 3s animation + 1.5s stagger
  }, 500);
});

navItems.forEach(item => {
  item.addEventListener('mouseenter', () => {
    entranceContainer.style.setProperty('opacity', '0.8');
    const section = item.textContent?.toLowerCase().trim();
    const navItem = navData.find(nav => nav.name === section);
    
    treeImages.forEach(img => {
      if (img.getAttribute('data-section') === section) {
        img.classList.add('active');
        
        // Special handling for different sections
        if (section === '2025 h4ckz') {
          // Add H4CKZ panel
          const h4ckzPanel = document.createElement('div');
          h4ckzPanel.classList.add('h4ckz-panel', 'panel-base');
          
          const h4ckzLinks = [
            { name: 'Latest Scam Alert', link: '/blog/sams-scams' },
            { name: 'Research Papers', link: '/research' },
            { name: 'Security Tools', link: '/projects#security' }
          ];
          
          h4ckzLinks.forEach(link => {
            const a = document.createElement('a');
            a.href = link.link;
            a.textContent = link.name;
            a.classList.add('panel-link');
            h4ckzPanel.appendChild(a);
          });
          
          document.querySelector('.tree-container')?.appendChild(h4ckzPanel);
          requestAnimationFrame(() => {
            h4ckzPanel.classList.add('active');
          });
        } else if (section === 'projects') {
          // Show project panel
          const projectPanel = document.createElement('div');
          projectPanel.classList.add('project-panel', 'panel-base');
          
          const projectLinks = [
            { name: 'VTSC Coin', link: '/projects#vtsc' },
            { name: 'Vault Network', link: '/projects#vault' },
            { name: 'DeFi Tools', link: '/projects#defi' },
            { name: 'Research Papers', link: '/projects#research' }
          ];
          
          projectLinks.forEach(project => {
            const link = document.createElement('a');
            link.href = project.link;
            link.textContent = project.name;
            link.classList.add('panel-link');
            projectPanel.appendChild(link);
          });
          
          document.querySelector('.tree-container')?.appendChild(projectPanel);
          requestAnimationFrame(() => {
            projectPanel.style.transform = 'translate(0, -50%)';
            projectPanel.style.opacity = '1';
          });
        }
      } else {
        img.classList.remove('active');
      }
    });
  });

  item.addEventListener('mouseleave', () => {
    entranceContainer.style.setProperty('opacity', '1');
    treeImages.forEach(img => img.classList.remove('active'));
    // Remove any panels
    const panels = document.querySelectorAll('.panel-base');
    panels.forEach(panel => {
      (panel as HTMLElement).classList.remove('active');
      setTimeout(() => panel.remove(), 500);
    });
  });

  let activePanel: HTMLElement | null = null;
  let isFullscreen = false;

  item.addEventListener('click', (e) => {
    e.preventDefault();
    const section = item.textContent?.toLowerCase().trim();
    
    // Find the corresponding tree image and panel
    const treeImage = Array.from(treeImages).find(img => 
      img.getAttribute('data-section') === section
    );

    // Handle DeFi section click
    if (section === 'defi simplified') {
      const defiFlash = document.getElementById('defiFlash');
      const defiContent = document.getElementById('defiContent');
      
      if (defiFlash && defiContent) {
        defiFlash.classList.add('active');
        setTimeout(() => {
          defiContent.classList.remove('hidden');
          defiFlash.classList.remove('active');
        }, 800);
      }
      return;
    }
    
    const panel = document.querySelector(
      section === 'projects' ? '.project-panel' : 
      section === '2025 h4ckz' ? '.h4ckz-panel' : 
      null
    );
    
    if (treeImage) {
      if (!isFullscreen) {
        // Toggle panel if exists
        if (panel) {
          if (activePanel === panel) {
            panel.classList.remove('active');
            activePanel = null;
          } else {
            if (activePanel) activePanel.classList.remove('active');
            panel.classList.add('active');
            activePanel = panel;
          }
        }
        
        // Toggle fullscreen
        treeImage.classList.add('fullscreen');
        document.querySelector('.fullscreen-overlay')?.classList.add('active');
        isFullscreen = true;
        
        // Disable navigation except current item
        navItems.forEach(nav => {
          if (nav !== item) {
            (nav as HTMLElement).style.pointerEvents = 'none';
          }
        });
      } else {
        // Exit fullscreen
        treeImage.classList.remove('fullscreen');
        document.querySelector('.fullscreen-overlay')?.classList.remove('active');
        isFullscreen = false;
        
        // Re-enable navigation
        navItems.forEach(nav => {
          (nav as HTMLElement).style.pointerEvents = 'auto';
        });
        
        // Keep panel active
        if (panel && panel === activePanel) {
          panel.classList.add('active');
        }
      }
    }
  });
});

// Close DeFi content when clicking close button
document.getElementById('closeDefiBtn')?.addEventListener('click', () => {
  const defiContent = document.getElementById('defiContent');
  if (defiContent) {
    defiContent.classList.add('hidden');
  }
});

// Close DeFi content when clicking outside
document.getElementById('defiContent')?.addEventListener('click', (e) => {
  const target = e.target as HTMLElement;
  const currentTarget = e.currentTarget as HTMLElement;
  if (target === currentTarget) {
    currentTarget.classList.add('hidden');
  }
});

// Popup event listeners
closePopupBtn?.addEventListener('click', () => {
  popup?.classList.add('hidden');
});

readMoreBtn?.addEventListener('click', () => {
  if (currentPostSlug) {
    window.location.href = `/blog/${currentPostSlug}`;
  }
});

// Close popup when clicking outside
popup?.addEventListener('click', (e) => {
  if (e.target === popup) {
    popup.classList.add('hidden');
  }
});
</script>
